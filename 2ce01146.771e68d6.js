(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{126:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(c,".").concat(m)]||p[m]||b[m]||o;return n?a.a.createElement(f,s(s({ref:t},l),{},{components:n})):a.a.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(126)),c={id:"formatters",title:"Formatters"},s={unversionedId:"references/formatters",id:"references/formatters",isDocsHomePage:!1,title:"Formatters",description:"Formatters are functions that return a single CSS declaration value. They can receive arguments, process them and return the value.",source:"@site/docs/references/formatters.md",slug:"/references/formatters",permalink:"/stylable.io/docs/references/formatters",editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/docs/references/formatters.md",version:"current",sidebar:"someSidebar",previous:{title:"Mixins",permalink:"/stylable.io/docs/references/mixins"},next:{title:"Stylable Variables",permalink:"/stylable.io/docs/references/st-variables"}},i=[{value:"Formatters with variables",id:"formatters-with-variables",children:[]},{value:"Nested formatters",id:"nested-formatters",children:[]}],l={toc:i};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Formatters are functions that return a single CSS declaration value. They can receive arguments, process them and return the value. "),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note"),Object(o.b)("br",{parentName:"p"}),"\n","Currently, any argument passed through to a formatter is of type ",Object(o.b)("inlineCode",{parentName:"p"},"string"),". We are in the process of adding support for more complex types.")),Object(o.b)("p",null,"For example a ",Object(o.b)("inlineCode",{parentName:"p"},"calc-font-size")," formatter can return a different value for the font size depending on the provided argument."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note"),Object(o.b)("br",{parentName:"p"}),"\n","If you need to return multiple declaration values, we recommend using ",Object(o.b)("strong",{parentName:"p"},"Stylable")," ",Object(o.b)("a",{parentName:"p",href:"/stylable.io/docs/references/mixins"},"mixins"),". ")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"/* ./calc-font-size.js */\nmodule.exports = function(baseSize, modifier) {\n    switch (modifier) {\n        case 'header':\n            return `${Number(baseSize) * 2}px`;\n        case 'aside':\n            return `${Number(baseSize) * 0.75}px`; \n        default: \n            return baseSize + 'px';\n    }\n};\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-css"},':import {\n    -st-from: "./calc-font-size";\n    -st-default: calcFontSize;\n}\n\n.header {\n    font-size: calcFontSize(16, header);\n}\n\n.form {\n    font-size: calcFontSize(16, body);\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-css"},"    /* CSS output */\n    .header {\n        font-size: 32px;\n    }\n\n    .form {\n        font-size: 16px;\n    }\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.header {\n    font-size: 32px;\n}\n\n.form {\n    font-size: 16px;\n}\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note about native URL functions"),Object(o.b)("br",{parentName:"p"}),"\n","Currently you cannot use formatters inside a native URL function. As a suggested workaround, you can return a URL function from a formattter.")),Object(o.b)("h2",{id:"formatters-with-variables"},"Formatters with variables"),Object(o.b)("p",null,"When the formatter is imported into the CSS, it can also be used with a ",Object(o.b)("a",{parentName:"p",href:"/stylable.io/docs/references/st-variables"},"variable"),". "),Object(o.b)("p",null,"In this example the CSS imports the same formatter as the previous example, ",Object(o.b)("inlineCode",{parentName:"p"},"calc-font-size"),", but the variable ",Object(o.b)("inlineCode",{parentName:"p"},"baseFontSize")," is added to the calculation.  "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-css"},':import {\n    -st-from: "./calc-font-size";\n    -st-default: calcFontSize;\n}\n\n:vars {\n    baseFontSize: 12;\n}\n\n.header {\n    font-size: calcFontSize(value(baseFontSize), header);\n}\n\n.form {\n    font-size: calcFontSize(value(baseFontSize), body);\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.header {\n    font-size: 24px;\n}\n.form {\n    font-size: 12px;\n}\n")),Object(o.b)("h2",{id:"nested-formatters"},"Nested formatters"),Object(o.b)("p",null,"You can also nest formatters to provide functions that are modular, composable and reusable. "),Object(o.b)("p",null,"In this example the formatter ",Object(o.b)("inlineCode",{parentName:"p"},"divBy2")," is nested in the ",Object(o.b)("inlineCode",{parentName:"p"},"round")," formatter. Both are imported into the CSS file and the output value is calculated from both. The formatters expose to the CSS mathematical calculations that are used in the JavaScript functions."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"/* ./math.js */\nmodule.export = {\n    divBy2: function(num) {\n        return Number(Number(num) / 2);\n    },\n    round: function(num) {\n        return Math.round(Number(num));\n    }\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-css"},':import {\n    -st-from: "./math";\n    -st-named: divBy2, round;\n}\n\n:vars {\n    baseSize: 17px;\n}\n\n.header {\n    font-size: round(divBy2(value(baseSize)))px;\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.header {\n    font-size: 9px;\n}\n")))}u.isMDXComponent=!0}}]);