(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{126:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=r.a.createContext({}),b=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=b(n),u=o,d=p["".concat(l,".").concat(u)]||p[u]||m[u]||a;return n?r.a.createElement(d,c(c({ref:t},i),{},{components:n})):r.a.createElement(d,c({ref:t},i))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var i=2;i<a;i++)l[i]=n[i];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return b}));var o=n(3),r=n(7),a=(n(0),n(126)),l={id:"stylable-component-library",title:"Create a Stylable Component Library",sidebar_label:"Stylable Component Library"},c={unversionedId:"guides/stylable-component-library",id:"guides/stylable-component-library",isDocsHomePage:!1,title:"Create a Stylable Component Library",description:"Here are some guidelines we gathered related to this project that you may be interested in following if you build your own library.",source:"@site/docs/guides/stylable-component-library.md",slug:"/guides/stylable-component-library",permalink:"/stylable.io/docs/guides/stylable-component-library",editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/docs/guides/stylable-component-library.md",version:"current",sidebar_label:"Stylable Component Library",sidebar:"someSidebar",previous:{title:"Build a Stylable Application",permalink:"/stylable.io/docs/guides/stylable-application"},next:{title:"Project Commons",permalink:"/stylable.io/docs/guides/project-commons"}},s=[{value:"Recommended folder structure",id:"recommended-folder-structure",children:[]},{value:"The <code>project.st.css</code> file",id:"the-projectstcss-file",children:[]},{value:"Customizable components",id:"customizable-components",children:[]},{value:"Theme",id:"theme",children:[]}],i={toc:s};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Here are some guidelines we gathered related to this project that you may be interested in following if you build your own library."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Stylable")," enables you to author a component library, that can be themed, and easily consumed and styled, by other ",Object(a.b)("strong",{parentName:"p"},"Stylable")," projects.  "),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Stylable")," is the styling, CSS side of working with components. For the ",Object(a.b)("strong",{parentName:"p"},"Stylable")," CSS to be fully useful, it must integrate with a component library from another source, for example React."),Object(a.b)("h2",{id:"recommended-folder-structure"},"Recommended folder structure"),Object(a.b)("p",null,"As a best practice, we recommend following this folder structure:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"src/\n    |\n    --- components/\n    |   |\n    |   --- my-component/\n    |   |   |\n    |   |   my-component.jsx\n    |   |   my-component.st.css\n    |   |\n    |   project.st.css\n    |\n    --- themes/\n    |   |\n    |   backoffice-theme.st.css\n    |   app-theme.st.css\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"src/components")," folder contains:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"a project stylesheet describing the project CSS API"),Object(a.b)("li",{parentName:"ul"},"a folder for each component with its stylable stylesheet"))),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"src/themes")," folder contains the relevant theme files.")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," Although you may think the project file should be at the ",Object(a.b)("inlineCode",{parentName:"p"},"src")," level, we recommend you to create the ",Object(a.b)("inlineCode",{parentName:"p"},"project.st.css")," file at the same level as your components because there are many links between this file and your component files.")),Object(a.b)("h2",{id:"the-projectstcss-file"},"The ",Object(a.b)("inlineCode",{parentName:"h2"},"project.st.css")," file"),Object(a.b)("p",null,"As a first step, create a ",Object(a.b)("a",{parentName:"p",href:"/stylable.io/docs/guides/project-commons"},"project commons stylesheet")," named ",Object(a.b)("inlineCode",{parentName:"p"},"project.st.css")," in the ",Object(a.b)("inlineCode",{parentName:"p"},"src/components")," directory. This exposes the API for the project. "),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note"),":\nIt is recommended to leave the project's CSS rulesets empty with no declarations. These should be defined in a theme file. ")),Object(a.b)("h2",{id:"customizable-components"},"Customizable components"),Object(a.b)("p",null,"Your components should be as easy to style as possible. We recommend following these guidelines when planning: "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Expose a good style API and its ",Object(a.b)("a",{parentName:"li",href:"/stylable.io/docs/references/pseudo-classes"},"custom states"),". "),Object(a.b)("li",{parentName:"ul"},"The component API should contain the minimum styling required for the component to function. For example some components may require layout. "),Object(a.b)("li",{parentName:"ul"},"The effect of CSS combinations is not always easy to understood and styles are generally less tested, therefore, we recommend adding comments that explain the reason for unclear CSS."),Object(a.b)("li",{parentName:"ul"},"Reusable ",Object(a.b)("a",{parentName:"li",href:"/stylable.io/docs/references/st-variables"},"vars")," should be declared outside of the component. The component can use vars for common values that are less likely to be override-able."),Object(a.b)("li",{parentName:"ul"},"Use ",Object(a.b)("a",{parentName:"li",href:"/stylable.io/docs/guides/component-variants"},"component variants")," and ",Object(a.b)("a",{parentName:"li",href:"/stylable.io/docs/guides/shared-classes"},"shared classes")," from the project file (",Object(a.b)("inlineCode",{parentName:"li"},"project.st.css"),").")),Object(a.b)("p",null,"More best practices for themable components can be found in the ",Object(a.b)("a",{parentName:"p",href:"/stylable.io/docs/guides/component-best-practices"},Object(a.b)("strong",{parentName:"a"},"Stylable")," component best practices guide"),"."),Object(a.b)("p",null,"In the following code, you can see a component described with:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"2 colors used from project"),Object(a.b)("li",{parentName:"ul"},"1 shared class ")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-css"},"/* app.st.css */\n@namespace \"App\";\n:import {\n    -st-from: '../project.st.css';\n    -st-named: color1, color2, emphasisBox;\n}\n.root {\n    color: value(color1);\n    background: value(color2);\n}\n.messageBox {\n    /* append emphasisBox CSS class to messageBox JS output */\n    -st-extends: emphasisBox;\n}\n")),Object(a.b)("h2",{id:"theme"},"Theme"),Object(a.b)("p",null,"The ",Object(a.b)("strong",{parentName:"p"},"Stylable")," library can include multiple theme files that render a different look and feel per theme. A theme imports the ",Object(a.b)("inlineCode",{parentName:"p"},"project.st.css")," file as a theme base to override variables, variants and classes from the library."),Object(a.b)("p",null,"In the following code, you can see a theme file customizing the library:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"override ",Object(a.b)("inlineCode",{parentName:"li"},"color1")," and ",Object(a.b)("inlineCode",{parentName:"li"},"color2")),Object(a.b)("li",{parentName:"ul"},"CSS for ",Object(a.b)("inlineCode",{parentName:"li"},"cancelButton")," variant component"),Object(a.b)("li",{parentName:"ul"},"CSS for ",Object(a.b)("inlineCode",{parentName:"li"},"emphsisBox")," shared class")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-css"},"/* backoffice-theme.st.css */\n@namespace \"backofficeTheme\";\n:import {\n    -st-from: '../project.st.css';\n    -st-named: color1, color2, cancelButton, emphasisBox;\n    color1: white;\n    color2: red;\n}\n.cancelButton {\n    color: value(color1);\n    background: value(color2);\n}\n.emphasisBox {\n    border: 3px solid value(color2);\n}\n")),Object(a.b)("p",null,"Read more about using themes in ",Object(a.b)("a",{parentName:"p",href:"./stylable-application#apply-component-library-theme"},"theme an application"),"."))}b.isMDXComponent=!0}}]);