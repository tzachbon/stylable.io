{"node_modules":{"@types":{}},"src":{"app.tsx":"import * as React from 'react';\nimport { Potato } from './potato';\nimport { NavBar } from './nav-bar';\nimport { Mood, Backdrop, Size } from './types';\nimport style from './app.st.css';\n\nconst moods = [\"happy\", \"shy\"];\nconst sizes = [\"big\", \"small\"];\n\ninterface AppState {\n    mood: Mood;\n    backdrop: Backdrop;\n    size: Size;\n}\n\nexport class App extends React.Component<{}, AppState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            mood: 'reset',\n            backdrop: 'default',\n            size: 'big'\n        };\n\n        this.handleMoodChange = this.handleMoodChange.bind(this);\n        this.handleBackdropChange = this.handleBackdropChange.bind(this);\n        this.handleSizeChange = this.handleSizeChange.bind(this);\n        this.resetAll = this.resetAll.bind(this);\n    }\n\n    private resetAll() {\n        this.setState({\n            mood: 'reset',\n            backdrop: 'default',\n            size: 'big'\n        });\n    }\n\n    private handleMoodChange(evt: any) {\n        this.setState({\n            mood: evt.target.value\n        });\n    }\n\n    private handleBackdropChange(evt: any) {\n        this.setState({\n            backdrop: evt.target.value\n        });\n    }\n\n    private handleSizeChange(evt: any) {\n        this.setState({\n            size: evt.target.value\n        });\n    }\n\n    randomSize(size: string): Size {\n        const randomSize = sizes[Math.floor(Math.random() * sizes.length)];\n        if (size === randomSize) {\n            return this.randomSize(size)\n        }\n        return randomSize as Size;\n    }\n\n    randomMood(mood: string): Mood {\n        const randomMood = moods[Math.floor(Math.random() * moods.length)];\n        if (mood === randomMood) {\n            return this.randomMood(mood);\n        }\n        return randomMood;\n    }\n\n    public render() {\n        let bruces = [];\n\n        return <div {...style('root')}>\n            <div {...style('backdrop', { in: this.state.backdrop })} />\n\n            <NavBar\n                mood={this.state.mood}\n                backdrop={this.state.backdrop}\n                size={this.state.size}\n                handleBackdropChange={this.handleBackdropChange}\n                handleMoodChange={this.handleMoodChange}\n                handleSizeChange={this.handleSizeChange}\n                resetAll={this.resetAll}\n            />\n\n            <Potato\n                {...style('potatoBruce')}\n                mood={this.state.mood}\n                size={this.state.size} />\n\n            <footer {...style('siteFooter')}>\n                <a href=\"https://stylable.io/\" target=\"_blank\"><span {...style('stylableLogo')}></span>Stylable</a> <a href=\"https://github.com/wix/potato-bruce\" target=\"_blank\"><span {...style('githubLogo')}></span>Github</a>\n            </footer>\n        </div>\n    }\n}","colors.st.css":":vars {\n  dark: #000;\n  tongueColor: #c00;\n  blueEyes: rgb(22, 38, 180);\n}","eye.st.css":":vars {\n  retinaSize: 100px;\n  negativeRetinaSize: -100px;\n}\n\n.root {}\n\n.brow {\n  top: 0;\n  position: relative;\n  height: 1px;\n  border: 10px solid #000;\n  border-top: 1px dashed rgb(228, 228, 228);\n  border-radius: 20%;\n  background-color: rgba(0, 0, 0, 0.8);\n  transition: all 125ms ease-in-out;\n}\n\n.socket {\n  position: relative;\n  border-radius: 50%;\n  width: value(retinaSize);\n  height: value(retinaSize);\n  line-height: value(retinaSize);\n  overflow: hidden;\n  background: rgba(255, 255, 255, 1);\n}\n\n.pupil {\n  color: #000;\n}\n\n.pupil::after {\n  content: '\\2022'; /* üëÅü•îüí∞üçåüê∏ü§òüî• */\n  display: block;\n  text-align: center;\n  transition: all 325ms ease-in;\n  font-size: 150px;\n}\n\n.lid {\n  position: absolute;\n  transition: all 125ms ease-in-out;  \n  top: value(negativeRetinaSize);\n  width: value(retinaSize);\n  height: value(retinaSize);\n}\n","app.st.css":":import {\n  -st-from: \"./colors.st.css\";\n  -st-named: dark, tongueColor, blueEyes;\n}\n\n:import {\n  -st-from: \"./potato.st.css\";\n  -st-default: Potato;\n}\n\n:vars {\n  negativeRetinaSize: -100px;\n  lidPositionShy: 75px;\n  navBarHeight: 60px;\n}\n\n/* \n  default look \n*/\n:global(*){\n    box-sizing: border-box;\n}\n.root {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.potatoBruce {\n  -st-extends: Potato;\n  position: relative;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  margin: 10% 0;\n  min-height: 500px;\n  max-width: 525px;\n  transition: 125ms ease-in-out;\n}\n.potatoBruce:size(small) {\n  transform: scale(0.3);\n}\n.potatoBruce:size(big) {\n  transform: scale(0.5);\n}\n.potatoBruce::eyes {\n  width: 100%;\n  text-align: center;\n}\n.potatoBruce::eye {\n  display: inline-block;\n  margin: 0 20px;\n}\n\n/*\n  HAPPY POTATO\n*/\n.potatoBruce:mood(happy) {\n  /* background: url(../images/potato/potato-small.png) no-repeat center; */\n  background: url(http://localhost:4000/images/potato/potato-small.png) no-repeat center;\n  background-size: cover;\n  border-color: transparent;\n}\n.potatoBruce:mood(happy)::top {\n  position: relative;\n  top: -100px;\n}\n.potatoBruce:mood(happy)::top::after {\n  content: 'üî•'; /* üëÅü•îüí∞üçåüê∏ü§òüî• */\n  font-size: 120px;\n  text-shadow: 0 0 0 #000;\n  position: relative;\n  color: transparent;\n  animation-name: emoji_color_change;\n  animation-duration: 700ms;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n.potatoBruce::eye:position(left) {\n  transform: rotate(0deg);\n  top: -20px;\n}\n.potatoBruce:mood(happy)::eye:position(right)::brow {\n  animation: twitch1 250ms infinite;\n  transform: rotate(0deg);\n  top: -20px;\n}\n.potatoBruce:mood(happy)::eye::socket {\n  background: none;\n}\n.potatoBruce:mood(happy)::eye::pupil::after {\n  content: 'üëÅ';\n  background: none;\n}\n.potatoBruce:mood(happy)::mouth {\n  position: relative;\n  height: 180px;\n  width: 200px;\n  margin: 0 auto;\n  background: value(dark);\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 50%;\n  border-bottom-right-radius: 50%;\n  overflow: hidden;\n}\n.potatoBruce:mood(happy)::mouth::upperLip {\n  display: none;\n}\n.potatoBruce:mood(happy)::mouth::tongue {\n  position: absolute;\n  height: 100px;\n  width: 100%;\n  margin: 0 auto;\n  bottom: 0;\n  right: 0;\n  background: value(tongueColor);\n  border-top-left-radius: 50%;\n}\n\n/*\n  SHY POTATO\n*/\n.potatoBruce:mood(shy) {\n  background: url(../images/potato/potato-small.png) no-repeat center;\n  background-size: cover;\n  border-color: transparent;\n}\n.potatoBruce:mood(shy)::top {\n  -webkit-mask: url(../images/potato/mohawk.svg) no-repeat center;\n  mask: url(../images/potato/mohawk.svg) no-repeat center;\n  position: absolute;\n  top: 122px;\n  height: 250px;\n  width: 200px;\n  margin-top: -265px;\n  background-color: green;\n}\n.backdrop:in(paris) ~ .potatoBruce:mood(shy)::top {\n  animation-name: background_change;\n  animation-duration: 2700ms;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n.potatoBruce:mood(shy)::eye:position(left)::brow {\n  animation: twitch1 250ms infinite;\n  transform: rotate(-15deg);\n  top: -20px;\n}\n.potatoBruce:mood(shy)::eye:position(right)::brow {\n  transform: rotate(15deg);\n  top: -5px;\n}\n.potatoBruce:mood(shy)::eye::socket {\n  overflow: hidden;\n}\n.potatoBruce:mood(shy)::eye::pupil {\n  line-height: calc(value(lidPositionShy) * 2);\n  font-size: 50px;\n}\n.potatoBruce:mood(shy)::eye::pupil::after {\n  content: '‚óè';\n  zoom: 1;\n  text-shadow: none;\n  color: value(blueEyes);\n}\n.potatoBruce:mood(shy)::eye:position(left)::pupil::after {\n  position: absolute;\n  left: 15px;\n}\n.potatoBruce:mood(shy)::eye:position(right)::pupil::after {\n  position: absolute;\n  right: 15px;\n}\n.potatoBruce:mood(shy)::mouth {\n  position: relative;\n  height: 85px;\n  width: 200px;\n  margin: 15px auto;\n  background: value(dark);\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 50%;\n  border-bottom-right-radius: 50%;\n  overflow: hidden;\n}\n.potatoBruce:mood(shy)::mouth::upperLip {\n  display: none;\n}\n.potatoBruce:mood(shy)::mouth::tongue {\n  position: absolute;\n  width: 100%;\n  height: 35px;\n  bottom: 0;\n  right: 0;\n  margin: 0 auto;\n  background: value(tongueColor);\n  border-top-left-radius: 50%;\n} \n\n/*\n  DEAL-WITH-IT POTATO\n*/\n.potatoBruce:mood(dealWithIt) {\n  background: url(../images/potato/potato-small.png) no-repeat center;\n  background-size: cover;\n  border-color: transparent;\n}\n.potatoBruce:mood(dealWithIt)::eyes {\n  position: relative;\n  background: url(../images/potato/glasses2.svg);\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n.potatoBruce:mood(dealWithIt)::eye::socket {\n  margin-top: 20px;\n  background: none;\n}\n.potatoBruce:mood(dealWithIt)::eye::pupil::after {\n  display: none;\n}\n\n/* Backdrop Image */\n.backdrop {\n  -st-states: in( enum(paris, wixhq) );\n  position: fixed;\n  top: value(navBarHeight);\n  left: 0;\n  width: 100%;\n  height: calc(100% - value(navBarHeight));\n  background-color: #eee;\n  background-image: linear-gradient(45deg, rgb(228, 228, 228) 25%, transparent 25%, transparent 75%, rgb(228, 228, 228) 75%, rgb(228, 228, 228)), \n  linear-gradient(45deg, rgb(228, 228, 228) 25%, transparent 25%, transparent 75%, rgb(228, 228, 228) 75%, rgb(228, 228, 228));\n  background-size: 30px 30px;\n  background-position: 0 0, 15px 15px;\n}\n.backdrop:in(paris) {\n  background: url(../images/potato/paris.jpg) no-repeat center;\n  background-size: cover;\n}\n.backdrop:in(wixhq) {\n  background: url(../images/potato/wixhq.jpg) no-repeat center;\n}\n\n/* \n  Keyframes\n*/\n@keyframes twitch1 {\n  5% {\n    left: -1px;\n  }\n  50% {\n    left: 4px;\n  }\n  95% {\n    left: 0;\n  }\n}\n\n@keyframes background_change {\n  0%   { background-color: #ff0000; }\n  15%  { background-color: #ff6600; }\n  30%  { background-color: #ffee00; }\n  45%  { background-color: #00ff00; }\n  60%  { background-color: #0000ff; }\n  75%  { background-color: #4400ff; }\n  100% { background-color: #9900ff; }; \n}\n\n@keyframes emoji_color_change {\n  0%   { text-shadow: 0 0 0 green;   }\n  15%  { text-shadow: 0 0 0 #ff6600; }\n  30%  { text-shadow: 0 0 0 #ffee00; }\n  45%  { text-shadow: 0 0 0 #00ff00; }\n  60%  { text-shadow: 0 0 0 #0000ff; }\n  75%  { text-shadow: 0 0 0 #4400FF; }\n  100% { text-shadow: 0 0 0 #9900FF; }; \n}\n\n\n/* \n  Footer\n*/\n.siteFooter {\n  box-shadow: 0 0 1rem rgba(0, 0, 0, 0.5);\n  position: fixed;\n  bottom: 0;\n  height: 40px;\n  line-height: 40px;\n  left: 0;\n  text-align: center;\n  width: 100%;\n  font-size: 0.8rem;\n  background: rgb(255, 255, 255);\n}\n.stylableLogo {\n  margin: 0 0.5rem;\n  vertical-align: middle;\n  display: inline-block;\n  width: 25px;\n  height: 25px;\n  background: url(../images/potato/stylable-logo.png) no-repeat center;\n  background-size: contain;\n}\n.githubLogo {\n  margin: 0 0.5rem;\n  vertical-align: middle;\n  display: inline-block;\n  width: 25px;\n  height: 25px;\n  background: url(../images/potato/github-logo.png) no-repeat center;\n  background-size: contain;\n}\n\n","mouth.tsx":"import * as React from 'react';\nimport style from './mouth.st.css';\n\nexport interface MouthProps {\n    className?: string;\n}\n\nexport const Mouth: React.SFC<MouthProps> = (props: MouthProps) => (\n    <div {...style('root', {}, props)} >\n        <div {...style('upperLip')} />\n        <div {...style('tongue')} />  \n        <div {...style('lowerLip')} />\n    </div>\n);\n","nav-bar.st.css":":vars {\n  navBarHeight: 60px;\n}\n\n.root {\n  -st-states: mood( enum(happy, shy, dealWithIt) ),\n              size( enum(small, big) ),\n              backdrop( enum(paris, wixhq) );\n\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: value(navBarHeight);\n  height: value(navBarHeight);\n  text-align: center;\n  z-index: 1000;\n  box-shadow: 0 0 1rem rgba(0, 0, 0, 0.5);\n  display: flex;\n}\n.nav {\n  width: 100%;\n  display: flex;\n}\n\n.root button {\n  user-select: none;\n  text-transform: uppercase;\n  height: value(navBarHeight);\n  line-height: calc(value(navBarHeight) / 2);\n  border: none;\n  background: #fff;\n  font-size: 14px;\n  outline: 0;\n  cursor: pointer;\n  flex: 1 0;\n  transition: all 125ms ease-in;\n  font-size: 1.5rem;\n}\n\n.buttonGroup {\n  flex: 1;\n  display: flex;\n}\n\n.nav button:hover {\n  background: rgba(184, 255, 189, 0.8);\n}\n\n.buttonGroup:hover {\n  box-shadow: 0 0 1rem rgba(0, 0, 0, 0.25);\n}\n\n.backdrop {}\n.size {}\n.isHappy {}\n.isShy {}\n.isGlasses{}\n.inParis{}\n.inWix {}\n.largeSize {}\n.smallSize {}\n.resetAllButton {}\n\n.active {\n  box-shadow: inset 0 -5px 0 0px rgba(255, 0, 0, 0.8);\n}\n.inactive {\n  box-shadow: inset 0 0 0 0 rgba(0, 0, 0, 0);\n}\n\n.root:mood(happy)::nav::resetAllButton,\n.root:mood(shy)::nav::resetAllButton,\n.root:mood(dealWithIt)::nav::resetAllButton {\n  -st-mixin: inactive;\n}\n\n.root::nav::resetAllButton {\n  -st-mixin: active;\n}\n\n.root:mood(happy)::nav::isHappy,\n.root:mood(shy)::nav::isShy,\n.root:mood(dealWithIt)::nav::isGlasses,\n.root:backdrop(paris)::nav::inParis,\n.root:backdrop(wixhq)::nav::inWix,\n.root:size(small)::nav::smallSize,\n.root:size(big)::nav::largeSize {\n  -st-mixin: active;\n}\n","mouth.st.css":".root {\n  position: relative;\n  width: 50%;\n  margin-top: 20px;\n}\n\n.lip {\n  background: #000;\n  height: 2px;\n  transition: 225ms ease-in;\n}\n\n.upperLip {\n  -st-extends: lip;\n}\n\n.tongue {\n\n}\n\n.lowerLip {\n  -st-extends: lip;  \n}\n","eye.tsx":"import * as React from 'react';\nimport style from './eye.st.css';\n\nexport interface EyeProps {\n    className?: string;\n}\n\nexport const Eye: React.SFC<EyeProps> = (props: EyeProps) => (\n    <div {...style('root', {}, props)}>\n        <div {...style('brow')} />\n        <div {...style('socket')} >\n            <div {...style('lid')} />\n            <span {...style('pupil')} />\n        </div>\n    </div>\n);\n","potato.st.css":":import {\n  -st-from: \"./eye.st.css\";\n  -st-default: Eye;\n}\n\n:import {\n  -st-from: \"./mouth.st.css\";\n  -st-default: Mouth;\n}\n\n.root {\n  -st-states: mood( enum(happy, shy, dealWithIt) ), size( enum(small, big) );\n  border: 10px solid #000;\n  border-radius: 50%;\n  background: #f0f0f0;\n}\n\n/* empty classes serve as an exposed interface that can be customized externally */\n.top {}\n.top::after {}\n\n.eyes {}\n.eye {\n  -st-extends: Eye;\n  -st-states: position( enum(left, right) );  \n}\n\n.mouth {\n  -st-extends: Mouth;\n}\n","potato.tsx":"import * as React from 'react';\nimport { Mood, Size } from './types';\nimport { Eye } from './eye';\nimport { Mouth } from './mouth';\n\nimport style from './potato.st.css';\n\ninterface PotatoBruceProps {\n    mood: Mood;\n    size: Size;\n    className?: string;\n}\n\nexport const Potato: React.SFC<PotatoBruceProps> = (props: PotatoBruceProps) => (\n    <div {...style('root', { mood: props.mood, size: props.size }, props)}>\n        <div className={style.top} />\n        <div className={style.eyes}>\n            <Eye {...style('eye', { position: 'left'})} />\n            <Eye {...style('eye', { position: 'right'})} />\n        </div>\n        <Mouth className={style.mouth} />\n    </div>\n);\n","nav-bar.tsx":"import * as React from 'react';\nimport { Backdrop, Mood, Size } from './types';\nimport style from \"./nav-bar.st.css\";\n\nexport interface NavBarProps {\n  size: Size;\n  backdrop: Backdrop;\n  mood: Mood;\n  handleMoodChange: any;\n  handleSizeChange: any;\n  handleBackdropChange: any;\n  resetAll: any;\n}\n\nexport const NavBar = (props: NavBarProps) => {\n  const {\n    handleMoodChange,\n    handleSizeChange,\n    handleBackdropChange,\n    resetAll,\n  } = props;\n\n  return (\n    <div {...style('root', {mood: props.mood, backdrop: props.backdrop, size: props.size})}>\n      <div {...style('nav', {}, props)}>\n        <div {...style('buttonGroup mood')}>\n          <button className={style.resetAllButton} onClick={resetAll}>:|</button>\n          <button className={style.isHappy} value=\"happy\" onClick={handleMoodChange}>üòÄ</button>\n          <button className={style.isShy} value=\"shy\" onClick={handleMoodChange}>‚ò∫Ô∏è</button>\n          <button className={style.isGlasses} value=\"dealWithIt\" onClick={handleMoodChange}>üï∂</button>\n        </div>\n        <div {...style('buttonGroup size')}>\n          <button className={style.smallSize} value=\"small\" onClick={handleSizeChange}>ü•î</button>\n          <button className={style.largeSize} value=\"big\" onClick={handleSizeChange}>ü•î</button>\n        </div>\n        <div {...style('buttonGroup location')}>\n          <button className={style.inParis} value=\"paris\" onClick={handleBackdropChange}>üá´üá∑</button>\n          <button className={style.inWix} value=\"wixhq\" onClick={handleBackdropChange}>üèô</button>\n        </div>\n      </div>\n    </div>);\n}","types.ts":"export type Mood = string; //'happy' | 'shy' | 'dealWithIt' | 'reset';\nexport type Backdrop = 'paris' | 'wixhq' | 'default';\nexport type Size = 'small' | 'big';\n"}}